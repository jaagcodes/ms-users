plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.plazoleta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.springdoc:springdoc-openapi-ui:1.8.0")
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // üîê Seguridad y JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-commons:1.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'

}

configurations.all {
    resolutionStrategy {
        force 'org.junit.jupiter:junit-jupiter-api:5.10.2'
        force 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
        force 'org.junit.platform:junit-platform-commons:1.10.2'
    }
}


tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.11" // Usa la √∫ltima versi√≥n estable
}

jacocoTestReport {
    dependsOn test // Ejecutar pruebas antes del reporte

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/test/html"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // Cobertura m√≠nima esperada: 80%
            }
        }
    }
}

tasks.named('check') {
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}

import java.awt.Desktop

tasks.register('openJacocoReport') {
    dependsOn jacocoTestReport

    doLast {
        def reportFile = file("$buildDir/reports/jacoco/test/html/index.html")
        if (reportFile.exists()) {
            println "Abriendo reporte JaCoCo en el navegador..."
            if (Desktop.isDesktopSupported()) {
                Desktop.desktop.browse(reportFile.toURI())
            } else {
                println "Desktop no soportado en este entorno, abre manualmente: $reportFile"
            }
        } else {
            println "El reporte HTML a√∫n no existe. Aseg√∫rate de que las pruebas se ejecutaron correctamente."
        }
    }
}

